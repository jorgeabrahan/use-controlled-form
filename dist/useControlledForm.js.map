{"version":3,"file":"useControlledForm.js","sources":["../src/useControlledForm.ts"],"sourcesContent":["import React, { useRef, useState } from 'react'\n\nexport const useControlledForm = <T extends Record<string, string | boolean>>(\n  initialFormState: T\n) => {\n  const getInitialFormErrors = () => {\n    return Object.keys(initialFormState).reduce((errors, key) => {\n      errors[key as keyof T] = ''\n      return errors\n    }, {} as { [K in keyof T]: string })\n  }\n  const [formState, setFormState] = useState<T>(initialFormState)\n  const [formErrors, setFormErrors] = useState<{ [K in keyof T]: string }>(() => {\n    return getInitialFormErrors()\n  })\n  const hasErrorsRef = useRef(false);\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = event.target\n    setFormState((prevState) => ({\n      ...prevState,\n      [name]: type === 'checkbox' ? checked : value\n    }))\n  }\n  const clearFormErrors = () => {\n    setFormErrors(getInitialFormErrors())\n    hasErrorsRef.current = false;\n  }\n  const resetForm = () => {\n    setFormState(initialFormState)\n    clearFormErrors()\n  }\n  const attachInputError = (inputName: keyof T, error: string) => {\n    hasErrorsRef.current = hasErrorsRef.current || error !== '';\n    setFormErrors((prevErrors) => {\n      const updatedErrors: { [K in keyof T]: string } = prevErrors\n        ? prevErrors\n        : ({} as { [K in keyof T]: string })\n      updatedErrors[inputName] = error\n      return updatedErrors as { [K in keyof T]: string }\n    })\n  }\n  return {\n    ...formState,\n    form: {\n      ...Object.keys(formState).reduce((acc, key) => {\n        const inputKey = key as keyof T\n        acc[inputKey] = {\n          id: inputKey,\n          value: formState[inputKey],\n          error: formErrors[inputKey] || ''\n        }\n        return acc\n      }, {} as { [K in keyof T]: { id: K; value: T[K]; error: string } }),\n      reset: resetForm,\n      clearErrors: clearFormErrors,\n      hasErrors: () => hasErrorsRef.current\n    },\n    onInputChange,\n    attachInputError\n  }\n}\n"],"names":["initialFormState","getInitialFormErrors","Object","keys","reduce","errors","key","_useState","useState","formState","setFormState","_useState2","formErrors","setFormErrors","hasErrorsRef","useRef","clearFormErrors","current","_extends","form","acc","id","value","error","reset","clearErrors","hasErrors","onInputChange","event","_event$target","target","name","type","checked","prevState","_extends2","attachInputError","inputName","prevErrors","updatedErrors"],"mappings":"yQAEiC,SAC/BA,GAEA,IAAMC,EAAuB,WAC3B,OAAOC,OAAOC,KAAKH,GAAkBI,OAAO,SAACC,EAAQC,GAEnD,OADAD,EAAOC,GAAkB,GAClBD,CACT,EAAG,CAAgC,EACrC,EACAE,EAAkCC,WAAYR,GAAvCS,EAASF,EAAA,GAAEG,EAAYH,KAC9BI,EAAoCH,EAAQA,SAA6B,WACvE,OAAOP,GACT,GAFOW,EAAUD,EAAA,GAAEE,EAAaF,KAG1BG,EAAeC,EAAAA,QAAO,GAQtBC,EAAkB,WACtBH,EAAcZ,KACda,EAAaG,SAAU,CACzB,EAeA,OAAAC,KACKT,EAAS,CACZU,KAAID,KACChB,OAAOC,KAAKM,GAAWL,OAAO,SAACgB,EAAKd,GAOrC,OALAc,EADiBd,GACD,CACde,GAFef,EAGfgB,MAAOb,EAHQH,GAIfiB,MAAOX,EAJQN,IAIgB,IAE1Bc,CACT,EAAG,KACHI,MA1Bc,WAChBd,EAAaV,GACbgB,GACF,EAwBIS,YAAaT,EACbU,UAAW,WAAM,OAAAZ,EAAaG,OAAO,IAEvCU,cAzCoB,SAACC,GACrB,IAAAC,EAAuCD,EAAME,OAArCC,EAAIF,EAAJE,KAAMT,EAAKO,EAALP,MAAOU,EAAIH,EAAJG,KAAMC,EAAOJ,EAAPI,QAC3BvB,EAAa,SAACwB,GAAS,IAAAC,EAAAjB,OAAAA,KAClBgB,IAASC,EAAAA,CAAAA,GACXJ,GAAgB,aAATC,EAAsBC,EAAUX,EAAKa,KAEjD,EAoCEC,iBA3BuB,SAACC,EAAoBd,GAC5CT,EAAaG,QAAUH,EAAaG,SAAqB,KAAVM,EAC/CV,EAAc,SAACyB,GACb,IAAMC,EAA4CD,GAE7C,CAAiC,EAEtC,OADAC,EAAcF,GAAad,EACpBgB,CACT,EACF,GAoBF"}