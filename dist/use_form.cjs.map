{"version":3,"file":"use_form.cjs","sources":["../src/use_form.ts"],"sourcesContent":["import React, { useRef, useState } from 'react'\n\nconst useForm = <T extends Record<string, string | boolean | number>>(\n  initialEntries: T\n) => {\n  const getInitialErrors = () => {\n    return Object.keys(initialEntries).reduce((errors, key) => {\n      errors[key as keyof T] = ''\n      return errors\n    }, {} as { [K in keyof T]: string })\n  }\n  const [entries, setEntries] = useState<T>(initialEntries)\n  const [errors, setErrors] = useState<{ [K in keyof T]: string }>(() =>\n    getInitialErrors()\n  )\n  const isInvalid = useRef(false)\n  const onChange = (\n    event: React.ChangeEvent<\n      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\n    >\n  ) => {\n    const { name, value, type } = event.target\n    setEntries((prevState) => ({\n      ...prevState,\n      [name]:\n        type === 'checkbox'\n          ? (event.target as HTMLInputElement)?.checked\n          : value\n    }))\n  }\n  const setValue = (inputKey: keyof T, value: string | boolean | number) => {\n    setEntries((prevState) => ({\n      ...prevState,\n      [inputKey]: value\n    }))\n  }\n  const setError = (inputKey: keyof T, error: string) => {\n    isInvalid.current = isInvalid.current || error !== ''\n    setErrors((prevErrors) => {\n      const updatedErrors: { [K in keyof T]: string } = prevErrors\n        ? prevErrors\n        : ({} as { [K in keyof T]: string })\n      updatedErrors[inputKey] = error\n      return updatedErrors as { [K in keyof T]: string }\n    })\n  }\n  const clearErrors = () => {\n    setErrors(getInitialErrors())\n    isInvalid.current = false\n  }\n  const reset = () => {\n    setEntries(initialEntries)\n    clearErrors()\n  }\n  return {\n    ...entries,\n    form: {\n      ...Object.keys(entries).reduce((acc, key) => {\n        const inputKey = key as keyof T\n        acc[inputKey] = {\n          id: inputKey,\n          value: entries[inputKey],\n          error: errors[inputKey] || ''\n        }\n        return acc\n      }, {} as { [K in keyof T]: { id: K; value: T[K]; error: string } }),\n      reset,\n      clearErrors,\n      isValid: () => !isInvalid.current\n    },\n    onChange,\n    setValue,\n    setEntries,\n    setError\n  }\n}\n\nexport default useForm\n"],"names":["initialEntries","getInitialErrors","Object","keys","reduce","errors","key","_useState","useState","entries","setEntries","_useState2","setErrors","isInvalid","useRef","clearErrors","current","_extends","form","acc","id","value","error","reset","isValid","onChange","event","_event$target","target","name","type","prevState","_event$target2","_extends2","checked","setValue","inputKey","_extends3","setError","prevErrors","updatedErrors"],"mappings":"8PAEgB,SACdA,GAEA,IAAMC,EAAmB,WACvB,OAAOC,OAAOC,KAAKH,GAAgBI,OAAO,SAACC,EAAQC,GAEjD,OADAD,EAAOC,GAAkB,GAClBD,CACT,EAAG,CAAA,EACL,EACAE,EAA8BC,EAAAA,SAAYR,GAAnCS,EAAOF,EAAEG,GAAAA,EAAUH,EAC1B,GAAAI,EAA4BH,EAAAA,SAAqC,WAC/D,OAAAP,GAAkB,GADbI,EAAMM,EAAEC,GAAAA,EAASD,EAGxB,GAAME,EAAYC,EAAAA,QAAO,GA+BnBC,EAAc,WAClBH,EAAUX,KACVY,EAAUG,SAAU,CACtB,EAKA,OAAAC,EACKR,CAAAA,EAAAA,GACHS,KAAID,EACCf,CAAAA,EAAAA,OAAOC,KAAKM,GAASL,OAAO,SAACe,EAAKb,GAOnC,OALAa,EADiBb,GACD,CACdc,GAFed,EAGfe,MAAOZ,EAHQH,GAIfgB,MAAOjB,EAJQC,IAIY,IAEtBa,CACT,EAAG,CAAA,GAAgE,CACnEI,MAhBU,WACZb,EAAWV,GACXe,GACF,EAcIA,YAAAA,EACAS,QAAS,WAAM,OAACX,EAAUG,OAAO,IAEnCS,SAtDe,SACfC,GAIA,IAAAC,EAA8BD,EAAME,OAA5BC,EAAIF,EAAJE,KAAMR,EAAKM,EAALN,MAAOS,EAAIH,EAAJG,KACrBpB,EAAW,SAACqB,GAASC,IAAAA,EAAAC,EAAAhB,OAAAA,KAChBc,IAASE,EAAA,CAAA,GACXJ,GACU,aAATC,EACKE,OADcA,EACdN,EAAME,aAANI,EAAAA,EAAmCE,QACpCb,EAAKY,GAAA,EAEf,EA0CEE,SAzCe,SAACC,EAAmBf,GACnCX,EAAW,SAACqB,OAASM,EAAA,OAAApB,EAAA,GAChBc,IAASM,EAAAA,IACXD,GAAWf,EAAKgB,GAAA,EAErB,EAqCE3B,WAAAA,EACA4B,SArCe,SAACF,EAAmBd,GACnCT,EAAUG,QAAUH,EAAUG,SAAqB,KAAVM,EACzCV,EAAU,SAAC2B,GACT,IAAMC,EAA4CD,GAE7C,GAEL,OADAC,EAAcJ,GAAYd,EACnBkB,CACT,EACF,GA8BF"}