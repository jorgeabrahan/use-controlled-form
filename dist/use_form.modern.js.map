{"version":3,"file":"use_form.modern.js","sources":["../src/use_form.ts"],"sourcesContent":["import React, { useRef, useState } from 'react'\n\nconst useForm = <T extends Record<string, string | boolean | number>>(\n  initialEntries: T\n) => {\n  const getInitialErrors = () => {\n    return Object.keys(initialEntries).reduce((errors, key) => {\n      errors[key as keyof T] = ''\n      return errors\n    }, {} as { [K in keyof T]: string })\n  }\n  const [entries, setEntries] = useState<T>(initialEntries)\n  const [errors, setErrors] = useState<{ [K in keyof T]: string }>(() =>\n    getInitialErrors()\n  )\n  const isInvalid = useRef(false)\n  const onChange = (\n    event: React.ChangeEvent<\n      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\n    >\n  ) => {\n    const { name, value, type } = event.target\n    setEntries((prevState) => ({\n      ...prevState,\n      [name]:\n        type === 'checkbox'\n          ? (event.target as HTMLInputElement)?.checked\n          : value\n    }))\n  }\n  const setValue = (inputKey: keyof T, value: string | boolean | number) => {\n    setEntries((prevState) => ({\n      ...prevState,\n      [inputKey]: value\n    }))\n  }\n  const setError = (inputKey: keyof T, error: string) => {\n    isInvalid.current = isInvalid.current || error !== ''\n    setErrors((prevErrors) => {\n      const updatedErrors: { [K in keyof T]: string } = prevErrors\n        ? prevErrors\n        : ({} as { [K in keyof T]: string })\n      updatedErrors[inputKey] = error\n      return updatedErrors as { [K in keyof T]: string }\n    })\n  }\n  const clearErrors = () => {\n    setErrors(getInitialErrors())\n    isInvalid.current = false\n  }\n  const reset = () => {\n    setEntries(initialEntries)\n    clearErrors()\n  }\n  return {\n    ...entries,\n    form: {\n      ...Object.keys(entries).reduce((acc, key) => {\n        const inputKey = key as keyof T\n        acc[inputKey] = {\n          id: inputKey,\n          value: entries[inputKey],\n          error: errors[inputKey] || ''\n        }\n        return acc\n      }, {} as { [K in keyof T]: { id: K; value: T[K]; error: string } }),\n      reset,\n      clearErrors,\n      isValid: () => !isInvalid.current\n    },\n    onChange,\n    setValue,\n    setEntries,\n    setError\n  }\n}\n\nexport default useForm\n"],"names":["useForm","initialEntries","getInitialErrors","Object","keys","reduce","errors","key","entries","setEntries","useState","setErrors","isInvalid","useRef","clearErrors","current","_extends","form","acc","id","value","error","reset","isValid","onChange","event","name","type","target","prevState","_event$target","checked","setValue","inputKey","setError","prevErrors","updatedErrors"],"mappings":"qQAEM,MAAAA,EACJC,IAEA,MAAMC,EAAmBA,IAChBC,OAAOC,KAAKH,GAAgBI,OAAO,CAACC,EAAQC,KACjDD,EAAOC,GAAkB,GAClBD,GACN,CAAA,IAEEE,EAASC,GAAcC,EAAYT,IACnCK,EAAQK,GAAaD,EAAqC,IAC/DR,KAEIU,EAAYC,GAAO,GA+BnBC,EAAcA,KAClBH,EAAUT,KACVU,EAAUG,SAAU,CACtB,EAKA,OAAAC,KACKR,EAAO,CACVS,KAAID,EACCb,CAAAA,EAAAA,OAAOC,KAAKI,GAASH,OAAO,CAACa,EAAKX,KAEnCW,EADiBX,GACD,CACdY,GAFeZ,EAGfa,MAAOZ,EAHQD,GAIfc,MAAOf,EAJQC,IAIY,IAEtBW,GACN,KACHI,MAhBUA,KACZb,EAAWR,GACXa,GAAW,EAeTA,cACAS,QAASA,KAAOX,EAAUG,UAE5BS,SArDAC,IAIA,MAAMC,KAAEA,EAAIN,MAAEA,EAAKO,KAAEA,GAASF,EAAMG,OACpCnB,EAAYoB,QAASC,EAAA,OAAAd,EAChBa,CAAAA,EAAAA,EACH,CAAAH,CAACA,GACU,aAATC,SAAmBG,EACdL,EAAMG,eAANE,EAAmCC,QACpCX,KAEV,EA0CEY,SAzCeA,CAACC,EAAmBb,KACnCX,EAAYoB,GAASb,KAChBa,EAAS,CACZI,CAACA,GAAWb,IACZ,EAsCFX,aACAyB,SArCeA,CAACD,EAAmBZ,KACnCT,EAAUG,QAAUH,EAAUG,SAAqB,KAAVM,EACzCV,EAAWwB,IACT,MAAMC,EAA4CD,GAE7C,CAAiC,EAEtC,OADAC,EAAcH,GAAYZ,EACnBe,GACR,GA6BO"}