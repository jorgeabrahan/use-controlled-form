{"version":3,"file":"useControlledForm.modern.mjs","sources":["../src/useControlledForm.ts"],"sourcesContent":["import React, { useRef, useState } from 'react'\n\nexport const useControlledForm = <T extends Record<string, string | boolean>>(\n  initialFormState: T\n) => {\n  const getInitialFormErrors = () => {\n    return Object.keys(initialFormState).reduce((errors, key) => {\n      errors[key as keyof T] = ''\n      return errors\n    }, {} as { [K in keyof T]: string })\n  }\n  const [formState, setFormState] = useState<T>(initialFormState)\n  const [formErrors, setFormErrors] = useState<{ [K in keyof T]: string }>(() => {\n    return getInitialFormErrors()\n  })\n  const hasErrorsRef = useRef(false);\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = event.target\n    setFormState((prevState) => ({\n      ...prevState,\n      [name]: type === 'checkbox' ? checked : value\n    }))\n  }\n  const clearFormErrors = () => {\n    setFormErrors(getInitialFormErrors())\n    hasErrorsRef.current = false;\n  }\n  const resetForm = () => {\n    setFormState(initialFormState)\n    clearFormErrors()\n  }\n  const attachInputError = (inputName: keyof T, error: string) => {\n    hasErrorsRef.current = hasErrorsRef.current || error !== '';\n    setFormErrors((prevErrors) => {\n      const updatedErrors: { [K in keyof T]: string } = prevErrors\n        ? prevErrors\n        : ({} as { [K in keyof T]: string })\n      updatedErrors[inputName] = error\n      return updatedErrors as { [K in keyof T]: string }\n    })\n  }\n  return {\n    ...formState,\n    form: {\n      ...Object.keys(formState).reduce((acc, key) => {\n        const inputKey = key as keyof T\n        acc[inputKey] = {\n          id: inputKey,\n          value: formState[inputKey],\n          error: formErrors[inputKey] || ''\n        }\n        return acc\n      }, {} as { [K in keyof T]: { id: K; value: T[K]; error: string } }),\n      reset: resetForm,\n      clearErrors: clearFormErrors,\n      hasErrors: () => hasErrorsRef.current\n    },\n    onInputChange,\n    attachInputError\n  }\n}\n"],"names":["useControlledForm","initialFormState","getInitialFormErrors","Object","keys","reduce","errors","key","formState","setFormState","useState","formErrors","setFormErrors","hasErrorsRef","useRef","clearFormErrors","current","_extends","form","acc","id","value","error","reset","resetForm","clearErrors","hasErrors","onInputChange","event","name","type","checked","target","prevState","attachInputError","inputName","prevErrors","updatedErrors"],"mappings":"qQAEa,MAAAA,EACXC,IAEA,MAAMC,EAAuBA,IACpBC,OAAOC,KAAKH,GAAkBI,OAAO,CAACC,EAAQC,KACnDD,EAAOC,GAAkB,GAClBD,GACN,CAAgC,IAE9BE,EAAWC,GAAgBC,EAAYT,IACvCU,EAAYC,GAAiBF,EAAqC,IAChER,KAEHW,EAAeC,GAAO,GAQtBC,EAAkBA,KACtBH,EAAcV,KACdW,EAAaG,SAAU,CACzB,EAeA,OAAAC,EACKT,CAAAA,EAAAA,EACHU,CAAAA,KAAID,EAAA,CAAA,EACCd,OAAOC,KAAKI,GAAWH,OAAO,CAACc,EAAKZ,KAErCY,EADiBZ,GACD,CACda,GAFeb,EAGfc,MAAOb,EAHQD,GAIfe,MAAOX,EAJQJ,IAIgB,IAE1BY,GACN,IAAgE,CACnEI,MA1BcC,KAChBf,EAAaR,GACbc,GACF,EAwBIU,YAAaV,EACbW,UAAWA,IAAMb,EAAaG,UAEhCW,cAzCqBC,IACrB,MAAMC,KAAEA,EAAIR,MAAEA,EAAKS,KAAEA,EAAIC,QAAEA,GAAYH,EAAMI,OAC7CvB,EAAcwB,GAAShB,EAAA,CAAA,EAClBgB,EAAS,CACZJ,CAACA,GAAgB,aAATC,EAAsBC,EAAUV,IACxC,EAqCFa,iBA3BuBA,CAACC,EAAoBb,KAC5CT,EAAaG,QAAUH,EAAaG,SAAqB,KAAVM,EAC/CV,EAAewB,IACb,MAAMC,EAA4CD,GAE7C,GAEL,OADAC,EAAcF,GAAab,EACpBe,GACR"}